package com.example.backoffice_app;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;
import java.util.Random;

@RestController // This means that this class is a Controller
@RequestMapping(path="") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private CustomerRepository customerRepository;

  //Add a customer
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String firstName, @RequestParam String lastName
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Random generator = new Random();
        int num = generator.nextInt(900000000) + 100000000;

    Customer n = new Customer();
    n.setFirstName(firstName);
    n.setLastName(lastName);
    n.setTotalRewards(0);
    n.setID(String.valueOf(num));
    customerRepository.save(n);
    return "Saved";
  }

  //Get all customers
  @GetMapping(path="/customers")
  public @ResponseBody Iterable<Customer> getAllUsers() {
    // This returns a JSON or XML with the users
    return customerRepository.findAll();
  }

  //Get customer with specific ID
  @GetMapping(path="/customer/{id}")
  public Customer getCustomerById(@PathVariable String id) {
    Customer customer = customerRepository.findByCustomerID(id);

        if (customer == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Error. Customer not found!");
        }
        return customer; 
  }

  @DeleteMapping(path="/clear")
  public void clearAllCustomer() {
    customerRepository.deleteAll();
    
  }
}