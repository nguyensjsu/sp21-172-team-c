package com.example.backoffice_app;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;
import java.util.Random;

import com.fasterxml.jackson.annotation.JsonCreator.Mode;


@Controller // This means that this class is a Controller
@RequestMapping(path="") //
public class CustomerController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private CustomerRepository customerRepository;


  @GetMapping
  public String home(Model model) {
    model.addAttribute("customer", new Customer());
    return "main";
  }

  @GetMapping("/search")
  public String search(Model model) {
    System.out.println("Search success");
    model.addAttribute("customer", new Customer());
    return "search";
  }

  @PostMapping("/search")
  public String search(@ModelAttribute Customer customer, Model model) {
    System.out.println("customerID: "+customer.getCustomerID());
    Iterable<Customer> customers = customerRepository.findAll();
    Customer found = new Customer();
    for(Customer c: customers) {
      if(c.getCustomerID().equals(customer.getCustomerID()))
        found = c;
    }

    if (found.getCustomerID() == null || found.getCustomerID().isBlank()) {
      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Error. Customer not found!");
    }
    else {
      model.addAttribute("customer", customer);
      model.addAttribute("firstname", found.getFirstName());
      model.addAttribute("lastname", found.getLastName());
      model.addAttribute("rewards", found.getRewards());
    }
    
    //model.addAttribute("customer", customer);
    return "backoffice";
  }

  //Add a customer
  @PostMapping(path="/add") // Map ONLY POST Requests
  public String addNewUser (@RequestParam String firstName, @RequestParam String lastName
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Random generator = new Random();
        int num = generator.nextInt(900000000) + 100000000;

    Customer n = new Customer();
    n.setFirstName(firstName);
    n.setLastName(lastName);
    n.setTotalRewards(0);
    n.setCustomerID(String.valueOf(num));
    customerRepository.save(n);
    return "main";
  }

  @RequestMapping(value="/customers")
  public String getAllCustomers(Model model) {
    // This returns a JSON or XML with the users
    Iterable<Customer> customers = customerRepository.findAll();
    model.addAttribute("customers", customers);
    System.out.println("Success");
    return "search_result";
}


  // //Get customer with specific ID
  // @RequestMapping(value = "/customer", method = RequestMethod.POST)
  // public String getCustomerById(@RequestParam String customerID, Model model) {
  //   Customer customer = customerRepository.findByCustomerID(customerID);

  //       if (customer == null) {
  //           throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Error. Customer not found!");
  //       }
  //       model.addAttribute("name", customer.getFirstName());
  //       return "backoffice"; 
  // }

  @DeleteMapping(path="/clear")
  public String clearAllCustomer() {
    customerRepository.deleteAll();
    return "main";
  }
}